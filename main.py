import os
import requests
import tarfile
import stat
import asyncio
import chess.engine

# --- Configuration (inchang√©e) ---
STOCKFISH_DIR = "stockfish_engine"
STOCKFISH_EXECUTABLE = os.path.join(STOCKFISH_DIR, "stockfish", "stockfish") # On garde ce chemin pour l'instant
STOCKFISH_URL = "https://github.com/official-stockfish/Stockfish/releases/download/sf_17.1/stockfish-ubuntu-x86-64-avx2.tar"
ARCHIVE_NAME = "stockfish.tar"

def list_files(startpath):
    """Fonction de d√©bogage pour lister les fichiers."""
    print(f"\n--- CONTENU DU DOSSIER '{startpath}' ---")
    for root, dirs, files in os.walk(startpath):
        level = root.replace(startpath, '').count(os.sep)
        indent = ' ' * 4 * (level)
        print(f'{indent}{os.path.basename(root)}/')
        subindent = ' ' * 4 * (level + 1)
        for f in files:
            print(f'{subindent}{f}')
    print("----------------------------------------\n")

def setup_stockfish():
    if os.path.exists(STOCKFISH_EXECUTABLE):
        print("üëç Stockfish est d√©j√† install√©.")
        return True

    print("üîß Stockfish non trouv√©. Lancement de l'installation...")
    try:
        os.makedirs(STOCKFISH_DIR, exist_ok=True)
        archive_path = os.path.join(STOCKFISH_DIR, ARCHIVE_NAME)

        print(f"üì• T√©l√©chargement...")
        with requests.get(STOCKFISH_URL, stream=True) as r:
            r.raise_for_status()
            with open(archive_path, "wb") as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
        print("‚úÖ T√©l√©chargement termin√©.")

        print("üóúÔ∏è  D√©compression de l'archive .tar...")
        with tarfile.open(archive_path) as tar:
            tar.extractall(path=STOCKFISH_DIR)
        print("‚úÖ D√©compression termin√©e.")
        
        # --- BLOC DE D√âBOGAGE ---
        # Affiche la structure des fichiers pour trouver le bon chemin
        list_files(STOCKFISH_DIR)
        # --- FIN DU BLOC DE D√âBOGAGE ---

        print("üîë Application des permissions d'ex√©cution...")
        st = os.stat(STOCKFISH_EXECUTABLE)
        os.chmod(STOCKFISH_EXECUTABLE, st.st_mode | stat.S_IEXEC)
        print("‚úÖ Permissions appliqu√©es.")
        
        os.remove(archive_path)
        print("üßπ Fichier d'archive supprim√©.")
        return True

    except Exception as e:
        print(f"‚ùå ERREUR lors de l'installation de Stockfish : {e}")
        return False

async def run_check():
    # Cette partie ne sera pas atteinte si l'installation √©choue, ce qui est normal pour ce test.
    print("\n--- D√©marrage de la v√©rification ---")
    engine = await chess.engine.SimpleEngine.popen_uci(STOCKFISH_EXECUTABLE)
    await engine.quit()
    print("‚úÖ Moteur d√©marr√© et arr√™t√© avec succ√®s.")

if __name__ == "__main__":
    if setup_stockfish():
        asyncio.run(run_check())
    else:
        print("Impossible de lancer la v√©rification car l'installation a √©chou√©.")
