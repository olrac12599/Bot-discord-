import os
import requests
import tarfile
import zstandard
import stat
import asyncio
import chess.engine
import io

# --- Configuration Finale ---
STOCKFISH_DIR = "stockfish_engine"
# Le chemin vers l'ex√©cutable dans les archives officielles
STOCKFISH_EXECUTABLE = os.path.join(STOCKFISH_DIR, "stockfish", "stockfish")
# L'URL d'une version pr√©-compil√©e officielle pour Linux
STOCKFISH_URL = "https://stockfishchess.org/files/stockfish-ubuntu-x86-64-modern.tar.zst"
ARCHIVE_NAME = "stockfish.tar.zst"

def setup_stockfish():
    """
    T√©l√©charge et installe une version pr√©-compil√©e de Stockfish.
    """
    if os.path.exists(STOCKFISH_EXECUTABLE):
        print("üëç Stockfish est d√©j√† install√©.")
        return True

    print("üîß Stockfish non trouv√©. Lancement de l'installation...")
    try:
        os.makedirs(STOCKFISH_DIR, exist_ok=True)
        archive_path = os.path.join(STOCKFISH_DIR, ARCHIVE_NAME)

        # 1. T√©l√©charger
        print(f"üì• T√©l√©chargement de la version pr√©-compil√©e de Stockfish...")
        with requests.get(STOCKFISH_URL, stream=True) as r:
            r.raise_for_status()
            with open(archive_path, "wb") as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
        print("‚úÖ T√©l√©chargement termin√©.")

        # 2. D√©compresser l'archive .tar.zst
        print("üóúÔ∏è  D√©compression de l'archive...")
        dctx = zstandard.ZstdDecompressor()
        with open(archive_path, 'rb') as ifh:
            decompressed_data = dctx.decompress(ifh.read())
            with tarfile.open(fileobj=io.BytesIO(decompressed_data), mode='r:') as tar:
                tar.extractall(path=STOCKFISH_DIR)
        print("‚úÖ D√©compression termin√©e.")

        # 3. Rendre l'ex√©cutable
        print(f"üîë Application des permissions d'ex√©cution au fichier : {STOCKFISH_EXECUTABLE}")
        st = os.stat(STOCKFISH_EXECUTABLE)
        os.chmod(STOCKFISH_EXECUTABLE, st.st_mode | stat.S_IEXEC)
        print("‚úÖ Permissions appliqu√©es.")
        
        # 4. Nettoyage
        os.remove(archive_path)
        print("üßπ Fichier d'archive supprim√©.")
        return True

    except Exception as e:
        print(f"‚ùå ERREUR lors de l'installation de Stockfish : {e}")
        # Affiche le contenu du dossier en cas d'erreur pour aider au diagnostic
        if os.path.exists(STOCKFISH_DIR):
            print(f"--- Contenu actuel de {STOCKFISH_DIR} ---")
            for item in os.listdir(STOCKFISH_DIR):
                print(f"- {item}")
        return False

async def run_check():
    """
    Lance le moteur et v√©rifie qu'il fonctionne.
    """
    print("\n--- D√©marrage de la v√©rification ---")
    try:
        engine = await chess.engine.SimpleEngine.popen_uci(STOCKFISH_EXECUTABLE)
        print("‚úÖ Moteur Stockfish d√©marr√© avec succ√®s !")
        
        board = chess.Board()
        info = await engine.analyse(board, chess.engine.Limit(time=0.5))
        best_move = info.get("pv")[0]
        
        print(f"‚ôüÔ∏è  Analyse rapide de la position initiale : OK (meilleur coup trouv√© : {board.san(best_move)})")
        
        await engine.quit()
        print("\nüéâ Mission accomplie ! Stockfish est install√© et fonctionnel.")
        
    except Exception as e:
        print(f"‚ùå ERREUR lors du test de Stockfish : {e}")

# --- Script Principal ---
if __name__ == "__main__":
    if setup_stockfish():
        asyncio.run(run_check())
    else:
        print("Impossible de lancer la v√©rification car l'installation a √©chou√©.")
