import os
import requests
import tarfile
import zstandard
import stat
import asyncio
import chess.engine
import io

# --- Configuration Finale ---
STOCKFISH_DIR = "stockfish_engine"
STOCKFISH_EXECUTABLE = os.path.join(STOCKFISH_DIR, "stockfish", "stockfish")
STOCKFISH_URL = "https://stockfishchess.org/files/stockfish-ubuntu-x86-64-modern.tar.zst"
ARCHIVE_NAME = "stockfish.tar.zst"

def setup_stockfish():
    """
    T√©l√©charge et installe une version pr√©-compil√©e de Stockfish
    avec des v√©rifications robustes pour garantir l'int√©grit√© du fichier.
    """
    if os.path.exists(STOCKFISH_EXECUTABLE):
        print("üëç Stockfish est d√©j√† install√©.")
        return True

    print("üîß Stockfish non trouv√©. Lancement de l'installation...")
    try:
        os.makedirs(STOCKFISH_DIR, exist_ok=True)
        archive_path = os.path.join(STOCKFISH_DIR, ARCHIVE_NAME)

        # 1. T√©l√©chargement "blind√©"
        print("üì• T√©l√©chargement de la version pr√©-compil√©e...")
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
        }
        with requests.get(STOCKFISH_URL, stream=True, headers=headers) as r:
            print(f"   - Statut de la r√©ponse du serveur : {r.status_code}")
            r.raise_for_status() # Stoppe si le statut n'est pas 200 (OK)

            content_type = r.headers.get('content-type', '').lower()
            print(f"   - Type de contenu re√ßu : {content_type}")
            if 'text/html' in content_type:
                print("‚ùå ERREUR: Le serveur a renvoy√© une page HTML au lieu du fichier binaire.")
                return False

            with open(archive_path, "wb") as f:
                for chunk in r.iter_content(chunk_size=8192):
                    f.write(chunk)
        print("‚úÖ T√©l√©chargement termin√©.")
        
        file_size_mb = os.path.getsize(archive_path) / (1024 * 1024)
        print(f"   - Taille du fichier t√©l√©charg√© : {file_size_mb:.2f} MB")
        if file_size_mb < 5: # Le binaire de Stockfish p√®se plus de 5 Mo
            print("‚ùå ERREUR: Le fichier t√©l√©charg√© est trop petit, il est donc corrompu ou incomplet.")
            return False
        print("   - La taille du fichier semble correcte.")

        # 2. D√©compresser
        print("üóúÔ∏è  D√©compression de l'archive...")
        dctx = zstandard.ZstdDecompressor()
        with open(archive_path, 'rb') as ifh:
            decompressed_data = dctx.decompress(ifh.read())
            with tarfile.open(fileobj=io.BytesIO(decompressed_data), mode='r:') as tar:
                tar.extractall(path=STOCKFISH_DIR)
        print("‚úÖ D√©compression termin√©e.")

        # 3. Appliquer les permissions
        print(f"üîë Application des permissions d'ex√©cution...")
        st = os.stat(STOCKFISH_EXECUTABLE)
        os.chmod(STOCKFISH_EXECUTABLE, st.st_mode | stat.S_IEXEC)
        print("‚úÖ Permissions appliqu√©es.")
        
        # 4. Nettoyage
        os.remove(archive_path)
        return True

    except Exception as e:
        print(f"‚ùå ERREUR lors de l'installation : {e}")
        return False

async def run_check():
    """Lance le moteur et v√©rifie qu'il fonctionne."""
    print("\n--- D√©marrage de la v√©rification ---")
    try:
        engine = await chess.engine.SimpleEngine.popen_uci(STOCKFISH_EXECUTABLE)
        print("‚úÖ Moteur Stockfish d√©marr√© avec succ√®s !")
        
        board = chess.Board()
        info = await engine.analyse(board, chess.engine.Limit(time=0.5))
        best_move = info.get("pv")[0]
        
        print(f"‚ôüÔ∏è  Analyse rapide : OK (meilleur coup trouv√© : {board.san(best_move)})")
        await engine.quit()
        print("\nüéâ Mission accomplie ! Stockfish est install√© et fonctionnel.")
        
    except Exception as e:
        print(f"‚ùå ERREUR lors du test de Stockfish : {e}")

# --- Script Principal ---
if __name__ == "__main__":
    if setup_stockfish():
        asyncio.run(run_check())
    else:
        print("Impossible de lancer la v√©rification car l'installation a √©chou√©.")
