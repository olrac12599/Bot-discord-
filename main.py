import discord
from discord.ext import commands
import os
import asyncio
import time
import subprocess
import traceback
import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# --- CONFIGURATION DES VARIABLES D'ENVIRONNEMENT ---
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
CHESS_USERNAME = os.getenv("CHESS_USERNAME")
CHESS_PASSWORD = os.getenv("CHESS_PASSWORD")

if not all([DISCORD_TOKEN, CHESS_USERNAME, CHESS_PASSWORD]):
    raise ValueError("ERREUR: Des variables d'environnement (DISCORD_TOKEN, CHESS_USERNAME, CHESS_PASSWORD) sont manquantes.")

# --- INITIALISATION DU BOT DISCORD ---
intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)

# --- FONCTION DE CAPTURE D'√âCRAN EN CAS D'ERREUR ---
def capture_on_error(driver, label="error"):
    timestamp = int(time.time())
    filename = f"screenshot_{label}_{timestamp}.png"
    try:
        driver.save_screenshot(filename)
        print(f"[üì∏] Screenshot d'erreur captur√© : {filename}")
        return filename
    except Exception as e:
        print(f"[‚ùå] La capture du screenshot a √©chou√© : {e}")
    return None

# --- ANALYSE EN DIRECT ---
async def analyze_game_live(ctx, driver, game_id):
    await ctx.send(f"üîç Analyse en direct lanc√©e pour la partie `{game_id}`. J'arr√™terai √† la fin de la partie.")

    try:
        while True:
            await asyncio.sleep(10)

            status = driver.execute_script("return window.liveGame?.status || null;")
            if status and status.lower() != "playing":
                await ctx.send(f"üèÅ Partie termin√©e (statut : `{status}`). Fin de l‚Äôanalyse.")
                break

            fen = driver.execute_script("return window.liveGame?.fen || null;")
            if not fen:
                await ctx.send("‚ö†Ô∏è FEN non disponible, je r√©essaie dans 10 secondes...")
                continue

            url = "https://lichess.org/api/cloud-eval"
            params = {"fen": fen, "multiPv": 1}
            response = requests.get(url, params=params)

            if response.status_code != 200:
                await ctx.send("‚ùå Lichess ne r√©pond pas correctement pour l‚Äôanalyse.")
                continue

            data = response.json()
            best_move = data["pvs"][0]["moves"]
            eval_info = data["pvs"][0].get("eval", {})
            cp = eval_info.get("cp")
            mate = eval_info.get("mate")

            evaluation = f"Mat en {mate}" if mate else f"{cp / 100:.2f}" if cp is not None else "Inconnue"
            await ctx.send(f"‚ôüÔ∏è Coup sugg√©r√© : `{best_move}` | √âvaluation : `{evaluation}`")

    except Exception as e:
        await ctx.send(f"üö® Une erreur est survenue pendant l'analyse en direct : {e}")

# --- FONCTION D'ENREGISTREMENT VID√âO ---
def record_chess_video(game_id):
    os.environ["DISPLAY"] = ":99"
    timestamp = int(time.time())
    video_filename = f"chess_{game_id}_{timestamp}.webm"
    screenshot_file = None

    xvfb = subprocess.Popen(["Xvfb", ":99", "-screen", "0", "1920x1080x24"])
    time.sleep(1)

    chrome_options = webdriver.ChromeOptions()
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-extensions")
    chrome_options.add_argument("--disable-in-process-stack-traces")
    chrome_options.add_argument("--log-level=3")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--lang=en-US")
    chrome_options.add_experimental_option('prefs', {'intl.accept_languages': 'en,en_US'})

    driver = None
    ffmpeg = None

    try:
        driver = webdriver.Chrome(options=chrome_options)
        wait = WebDriverWait(driver, 20)

        ffmpeg = subprocess.Popen([
            "ffmpeg", "-y", "-video_size", "1920x1080", "-framerate", "25",
            "-f", "x11grab", "-i", ":99.0", "-c:v", "libvpx-vp9",
            "-b:v", "1M", "-pix_fmt", "yuv420p", video_filename
        ])

        driver.get("https://www.chess.com/login_and_go")

        try:
            print("[‚è≥] Recherche du pop-up de confidentialit√©...")
            accept_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'I Accept')] | //button[contains(., 'Reject All')]"))
            )
            accept_button.click()
            print("[‚úÖ] Pop-up de confidentialit√© ferm√©.")
            time.sleep(1)
        except Exception:
            print("[‚ÑπÔ∏è] Aucun pop-up de confidentialit√© d√©tect√©.")

        print("[‚è≥] Connexion en cours...")
        username_input = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@placeholder='Username, Phone, or Email']"))
        )
        username_input.clear()
        username_input.send_keys(CHESS_USERNAME)

        password_input = wait.until(
            EC.element_to_be_clickable((By.XPATH, "//input[@placeholder='Password']"))
        )
        password_input.clear()
        password_input.send_keys(CHESS_PASSWORD)

        login_button = wait.until(EC.element_to_be_clickable((By.ID, "login")))
        login_button.click()

        wait.until(EC.url_contains("chess.com/home"))
        print("[‚úÖ] Connexion r√©ussie.")
        time.sleep(2)

        try:
            dismiss_button = WebDriverWait(driver, 10).until(
                EC.element_to_be_clickable((By.XPATH, "//button[contains(., 'Non, merci')] | //a[contains(@class, 'modal-trial-close-icon')]"))
            )
            dismiss_button.click()
            print("[‚úÖ] Pop-up post-connexion ferm√©.")
            time.sleep(1)
        except Exception:
            print("[‚ÑπÔ∏è] Aucun pop-up post-connexion d√©tect√©.")

        print(f"[‚û°Ô∏è] Navigation vers la partie : {game_id}")
        driver.get(f"https://www.chess.com/game/live/{game_id}")

        wait.until(EC.presence_of_element_located((By.ID, "game-board")))
        print("[‚úÖ] Partie charg√©e.")
        time.sleep(5)

        return video_filename, screenshot_file, driver

    except Exception as e:
        print(f"[üö®] Erreur Selenium : {e}")
        traceback.print_exc()
        if driver:
            try:
                screenshot_file = capture_on_error(driver, "record_error")
            except Exception as screenshot_error:
                print(f"[‚ùå] √âchec capture apr√®s erreur : {screenshot_error}")
        return None, screenshot_file, None

    finally:
        if ffmpeg and ffmpeg.poll() is None:
            ffmpeg.terminate()
            try:
                ffmpeg.wait(timeout=5)
            except subprocess.TimeoutExpired:
                ffmpeg.kill()
        if xvfb:
            xvfb.terminate()

# --- COMMANDE DISCORD ---
@bot.command(name="videochess")
async def videochess(ctx, game_id: str):
    if not game_id.isdigit():
        await ctx.send("‚ùå L'ID de la partie doit √™tre un num√©ro. Exemple: `!videochess 987654321`")
        return

    await ctx.send(f"üé• Lancement de l'enregistrement pour la partie `{game_id}`...")
    try:
        video_file, screenshot, driver = await asyncio.to_thread(record_chess_video, game_id)

        if driver:
            await analyze_game_live(ctx, driver, game_id)
            driver.quit()

        if video_file and os.path.exists(video_file):
            if os.path.getsize(video_file) < 8 * 1024 * 1024:
                await ctx.send("‚úÖ Enregistrement termin√© !", file=discord.File(video_file))
            else:
                await ctx.send("‚ö†Ô∏è Vid√©o trop lourde pour Discord (> 8MB).")
            os.remove(video_file)
        else:
            await ctx.send("‚ùå La vid√©o n'a pas pu √™tre g√©n√©r√©e.")

        if screenshot and os.path.exists(screenshot):
            await ctx.send("üñºÔ∏è Screenshot captur√© :", file=discord.File(screenshot))
            os.remove(screenshot)

    except Exception as e:
        await ctx.send(f"üö® Erreur critique : {e}")
        traceback.print_exc()

# --- COMMANDE PING ---
@bot.command(name="ping")
async def ping(ctx):
    await ctx.send(f"Pong! Latence : {round(bot.latency * 1000)}ms")

# --- BOT PR√äT ---
@bot.event
async def on_ready():
    print(f"‚úÖ Connect√© en tant que {bot.user}")
    print("ü§ñ Le bot est pr√™t √† recevoir des commandes.")

# --- D√âMARRAGE ---
async def main():
    await bot.start(DISCORD_TOKEN)

if __name__ == "__main__":
    asyncio.run(main())